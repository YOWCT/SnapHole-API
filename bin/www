#!/usr/bin/env node

const app = require('../app');
const fs = require('fs');
const path = require('path');
const http = require('http');
const https = require('https');
const debug = require('debug')('workspace:server');
let {PORT, NODE_ENV} = process.env;

// Default Environment variables
PORT = PORT || 8089;

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(PORT);
app.set('port', port);

/**
 * Create HTTP server.
 */
let server;
if (NODE_ENV === 'development') {
    server = http.createServer(app);
} else {
    server = https.createServer({
        key: fs.readFileSync(path.join(__dirname, 'key.pem')),
        cert: fs.readFileSync(path.join(__dirname, 'cert.pem'))
    }, app);
}

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
console.log('server running on port: ' + port)
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    const port = parseInt(val, 10);

    // named pipe
    if (isNaN(port)) return val;
    // port number
    if (port >= 0) return port;
    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}
